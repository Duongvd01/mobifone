server {
    listen 80;
    server_name mobistt.mobifone.ai;
    # # Route for assets (image, js, css, ...)
    # location /assets {
    #     root /var/www/api/assets; # Đường dẫn đến thư mục assets
    #     index index.html;
    #     expires 1d; # Cache assets trong 1 ngày
    # }

    return 301 https://$host$request_uri;

}

server {
    listen 443 ssl;
    server_name mobistt.mobifone.ai;

    ssl_certificate /etc/ssl/mobifone_ai.pem;
    ssl_certificate_key /etc/ssl/mobifone_ai.pem;

    proxy_buffer_size 128k;
    proxy_buffers 4 256k;
    proxy_busy_buffers_size 256k;
    
    # Enable debug logging for troubleshooting
    error_log /var/log/nginx/error.log debug;
    
    # # Route for websocket
    # location /socket {
    #     # Upstream backend for websocket
    #     proxy_pass http://localhost:3001; 
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection "upgrade";
    #     # proxy_read_timeout 60s; # Timeout for reading data from websocket
    # }

    # Proxy static file requests directly to Flask
    location /static/ {
        proxy_pass http://flask-app:8080/static/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_intercept_errors off;
        proxy_http_version 1.1;
        proxy_read_timeout 120s;
        expires 7d;
    }

    # Handle specific file types
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|mp3|wav|mp4)$ {
        proxy_pass http://flask-app:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        expires 7d;
    }

    # Route cho API
    location / {
        # Upstream backend for API
        proxy_pass http://flask-app:8080; 
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        # Timeout for reading data from API
        proxy_read_timeout 60s; 
        # Timeout for sending data to API
        proxy_send_timeout 60s;
        # Timeout for connecting to API backend
        proxy_connect_timeout 60s;
        proxy_intercept_errors off;

        # limit request rate (e.g. 100 requests/second)
        # limit_req zone=one burst=10 nodelay; 
        # # Security
        # server_tokens off; 
        # # Don't show Nginx version
        # add_header X-Frame-Options SAMEORIGIN; 
        # # Allow iframes from same origin only
        # add_header X-Content-Type-Options nosniff; 
        # # Prevent auto-detect content type
        # add_header X-XSS-Protection "1; mode=block"; 
        # # Enable XSS protection
        # add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"; 
        # # Enable HSTS
        # add_header Referrer-Policy "no-referrer"; 
        # # Don't allow referrer information transmission
        # add_header X-Permitted-Cross-Domain-Policies none; 
        # # Don't allow cross-domain requests
        # add_header Content-Security-Policy "default-src 'self' https: data: blob: 'unsafe-inline' 'unsafe-eval'"; 
        # # Set safe sources for Content-Security-Policy
        # add_header Expect-CT "enforce, max-age=86400"; 
    }


    # # Upstream backend for API
    # upstream api_backend {
    #     # use least_conn to distribute load to backend servers
    #     least_conn;
    #     server backend1:8000 weight=1 max_fails=2 fail_timeout=10s;
    #     server backend2:8000 weight=1 max_fails=2 fail_timeout=10s;
    #     # ... add more backend servers if needed
    # }

    # # Upstream backend for websocket
    # upstream websocket_backend {
    #     server websocket_server:8080;
    # }
}